version: '3.7'

services:
    client:
        build:
            context: Client
        ports:
            - 3000:3000
        volumes:
            - ./Client/src:/app/src
            - /app/node_modules
        restart: always
        networks:
            - nginx-networks
    server_api:
        image: ${DOCKER_REGISTRY-}server_api
        ports:
            - 5003:5003
        build:
            context: Server
            dockerfile: Dockerfile
        volumes:
            - ./:/src
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:5003
            - DOTNET_WATCH_RESTART_ON_RUDE_EDIT=true
        restart: always
        networks:
            - nginx-networks
    postgres:
        container_name: postgres_container
        image: postgres:13
        environment:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: root
        ports:
            - 5432:5432
        volumes:
            - type: volume
              source: postgresvolume
              target: /var/lib/postgresql/data
        restart: always
        command: -p 5432
        networks:
            - nginx-networks
    pgadmin:
        user: root
        container_name: pgadmin_container
        image: dpage/pgadmin4:5.7
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: root
            PGADMIN_CONFIG_SERVER_MODE: 'False'
            PGADMIN_LISTEN_PORT: 30003
        volumes:
            - ./pgadmin:/var/lib/pgadmin
            - ./backups:/root
        ports:
            - "30003:30003"
        restart: unless-stopped
        depends_on:
            - postgres
        networks:
            - nginx-networks

    nginx:
        build:
            context: ./nginx
            dockerfile: Nginx.Dockerfile
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - client
            - server_api
            - pgadmin
            - postgres
        restart: always
        networks:
            - nginx-networks

networks:
    nginx-networks:
        driver: bridge

volumes:
    postgresvolume:
        driver: "local"